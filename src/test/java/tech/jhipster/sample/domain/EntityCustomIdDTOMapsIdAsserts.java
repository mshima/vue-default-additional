package tech.jhipster.sample.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EntityCustomIdDTOMapsIdAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityCustomIdDTOMapsIdAllPropertiesEquals(EntityCustomIdDTOMapsId expected, EntityCustomIdDTOMapsId actual) {
        assertEntityCustomIdDTOMapsIdAutoGeneratedPropertiesEquals(expected, actual);
        assertEntityCustomIdDTOMapsIdAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityCustomIdDTOMapsIdAllUpdatablePropertiesEquals(
        EntityCustomIdDTOMapsId expected,
        EntityCustomIdDTOMapsId actual
    ) {
        assertEntityCustomIdDTOMapsIdUpdatableFieldsEquals(expected, actual);
        assertEntityCustomIdDTOMapsIdUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the derived primary key is set correctly.
     *
     * @param entityToPersist the entity used to persist
     * @param persisted the persisted entity
     */
    public static void assertEntityCustomIdDTOMapsIdMapsIdRelationshipPersistedValue(
        EntityCustomIdDTOMapsId entityToPersist,
        EntityCustomIdDTOMapsId persisted
    ) {
        // Validate the id for MapsId, the ids must be same
        assertThat(entityToPersist.getEntityCustomIdDTO().getCustomId()).isEqualTo(persisted.getCustomId());
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityCustomIdDTOMapsIdAutoGeneratedPropertiesEquals(
        EntityCustomIdDTOMapsId expected,
        EntityCustomIdDTOMapsId actual
    ) {
        assertThat(actual)
            .as("Verify EntityCustomIdDTOMapsId auto generated properties")
            .satisfies(a -> assertThat(a.getCustomId()).as("check customId").isEqualTo(expected.getCustomId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityCustomIdDTOMapsIdUpdatableFieldsEquals(
        EntityCustomIdDTOMapsId expected,
        EntityCustomIdDTOMapsId actual
    ) {
        // empty method

    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityCustomIdDTOMapsIdUpdatableRelationshipsEquals(
        EntityCustomIdDTOMapsId expected,
        EntityCustomIdDTOMapsId actual
    ) {
        assertThat(actual)
            .as("Verify EntityCustomIdDTOMapsId relationships")
            .satisfies(a ->
                assertThat(a.getManyToManyMapsIdBacks()).as("check manyToManyMapsIdBacks").isEqualTo(expected.getManyToManyMapsIdBacks())
            );
    }
}
