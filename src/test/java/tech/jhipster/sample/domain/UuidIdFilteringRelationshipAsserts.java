package tech.jhipster.sample.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UuidIdFilteringRelationshipAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUuidIdFilteringRelationshipAllPropertiesEquals(
        UuidIdFilteringRelationship expected,
        UuidIdFilteringRelationship actual
    ) {
        assertUuidIdFilteringRelationshipAutoGeneratedPropertiesEquals(expected, actual);
        assertUuidIdFilteringRelationshipAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUuidIdFilteringRelationshipAllUpdatablePropertiesEquals(
        UuidIdFilteringRelationship expected,
        UuidIdFilteringRelationship actual
    ) {
        assertUuidIdFilteringRelationshipUpdatableFieldsEquals(expected, actual);
        assertUuidIdFilteringRelationshipUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUuidIdFilteringRelationshipAutoGeneratedPropertiesEquals(
        UuidIdFilteringRelationship expected,
        UuidIdFilteringRelationship actual
    ) {
        assertThat(actual)
            .as("Verify UuidIdFilteringRelationship auto generated properties")
            .satisfies(a -> assertThat(a.getRelatedId()).as("check relatedId").isEqualTo(expected.getRelatedId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUuidIdFilteringRelationshipUpdatableFieldsEquals(
        UuidIdFilteringRelationship expected,
        UuidIdFilteringRelationship actual
    ) {
        // empty method

    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUuidIdFilteringRelationshipUpdatableRelationshipsEquals(
        UuidIdFilteringRelationship expected,
        UuidIdFilteringRelationship actual
    ) {
        assertThat(actual)
            .as("Verify UuidIdFilteringRelationship relationships")
            .satisfies(a -> assertThat(a.getOneToOne()).as("check oneToOne").isEqualTo(expected.getOneToOne()))
            .satisfies(a -> assertThat(a.getOneToOneMapsId()).as("check oneToOneMapsId").isEqualTo(expected.getOneToOneMapsId()))
            .satisfies(a -> assertThat(a.getManyToOne()).as("check manyToOne").isEqualTo(expected.getManyToOne()))
            .satisfies(a -> assertThat(a.getManyToOneMapsId()).as("check manyToOneMapsId").isEqualTo(expected.getManyToOneMapsId()))
            .satisfies(a -> assertThat(a.getManyToManies()).as("check manyToManies").isEqualTo(expected.getManyToManies()))
            .satisfies(a -> assertThat(a.getManyToManyMapsIds()).as("check manyToManyMapsIds").isEqualTo(expected.getManyToManyMapsIds()));
    }
}
