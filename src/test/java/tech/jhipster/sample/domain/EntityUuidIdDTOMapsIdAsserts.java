package tech.jhipster.sample.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EntityUuidIdDTOMapsIdAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityUuidIdDTOMapsIdAllPropertiesEquals(EntityUuidIdDTOMapsId expected, EntityUuidIdDTOMapsId actual) {
        assertEntityUuidIdDTOMapsIdAutoGeneratedPropertiesEquals(expected, actual);
        assertEntityUuidIdDTOMapsIdAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityUuidIdDTOMapsIdAllUpdatablePropertiesEquals(
        EntityUuidIdDTOMapsId expected,
        EntityUuidIdDTOMapsId actual
    ) {
        assertEntityUuidIdDTOMapsIdUpdatableFieldsEquals(expected, actual);
        assertEntityUuidIdDTOMapsIdUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the derived primary key is set correctly.
     *
     * @param entityToPersist the entity used to persist
     * @param persisted the persisted entity
     */
    public static void assertEntityUuidIdDTOMapsIdMapsIdRelationshipPersistedValue(
        EntityUuidIdDTOMapsId entityToPersist,
        EntityUuidIdDTOMapsId persisted
    ) {
        // Validate the id for MapsId, the ids must be same
        assertThat(entityToPersist.getEntityUuidIdDTO().getId()).isEqualTo(persisted.getId());
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityUuidIdDTOMapsIdAutoGeneratedPropertiesEquals(
        EntityUuidIdDTOMapsId expected,
        EntityUuidIdDTOMapsId actual
    ) {
        assertThat(actual)
            .as("Verify EntityUuidIdDTOMapsId auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityUuidIdDTOMapsIdUpdatableFieldsEquals(EntityUuidIdDTOMapsId expected, EntityUuidIdDTOMapsId actual) {
        // empty method

    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityUuidIdDTOMapsIdUpdatableRelationshipsEquals(
        EntityUuidIdDTOMapsId expected,
        EntityUuidIdDTOMapsId actual
    ) {
        assertThat(actual)
            .as("Verify EntityUuidIdDTOMapsId relationships")
            .satisfies(a ->
                assertThat(a.getManyToManyMapsIdBacks()).as("check manyToManyMapsIdBacks").isEqualTo(expected.getManyToManyMapsIdBacks())
            );
    }
}
