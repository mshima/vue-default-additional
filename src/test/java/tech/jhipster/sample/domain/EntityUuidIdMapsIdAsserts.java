package tech.jhipster.sample.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EntityUuidIdMapsIdAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityUuidIdMapsIdAllPropertiesEquals(EntityUuidIdMapsId expected, EntityUuidIdMapsId actual) {
        assertEntityUuidIdMapsIdAutoGeneratedPropertiesEquals(expected, actual);
        assertEntityUuidIdMapsIdAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityUuidIdMapsIdAllUpdatablePropertiesEquals(EntityUuidIdMapsId expected, EntityUuidIdMapsId actual) {
        assertEntityUuidIdMapsIdUpdatableFieldsEquals(expected, actual);
        assertEntityUuidIdMapsIdUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the derived primary key is set correctly.
     *
     * @param entityToPersist the entity used to persist
     * @param persisted the persisted entity
     */
    public static void assertEntityUuidIdMapsIdMapsIdRelationshipPersistedValue(
        EntityUuidIdMapsId entityToPersist,
        EntityUuidIdMapsId persisted
    ) {
        // Validate the id for MapsId, the ids must be same
        assertThat(entityToPersist.getEntityUuidId().getId()).isEqualTo(persisted.getId());
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityUuidIdMapsIdAutoGeneratedPropertiesEquals(EntityUuidIdMapsId expected, EntityUuidIdMapsId actual) {
        assertThat(actual)
            .as("Verify EntityUuidIdMapsId auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityUuidIdMapsIdUpdatableFieldsEquals(EntityUuidIdMapsId expected, EntityUuidIdMapsId actual) {
        // empty method

    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityUuidIdMapsIdUpdatableRelationshipsEquals(EntityUuidIdMapsId expected, EntityUuidIdMapsId actual) {
        assertThat(actual)
            .as("Verify EntityUuidIdMapsId relationships")
            .satisfies(a ->
                assertThat(a.getManyToManyMapsIdBacks()).as("check manyToManyMapsIdBacks").isEqualTo(expected.getManyToManyMapsIdBacks())
            );
    }
}
